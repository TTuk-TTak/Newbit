<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.newbit.model.mapper.UserMapper">
	<!-- 회원가입 -->
	<insert id="addUser" parameterType="userDto"><!-- com.ssafy.newbit.model.UserDto -->
		insert into user(user_email, user_id, user_nick, user_password,
		user_date)
		values(#{userEmail}, #{userId}, #{userNick},
		#{userPassword}, now())
	</insert>

	<!-- 아이디 중복체크 -->
	<select id="checkId" parameterType="String" resultType="int">
		SELECT
		COUNT(user_id) FROM user WHERE user_id= #{userId}
	</select>

	<!-- 이메일 중복체크 -->
	<select id="checkEmail" parameterType="String" resultType="int">
		SELECT COUNT(user_email) FROM user WHERE user_email= #{userEmail}
	</select>



	<!-- 첫로그인 : 관심키워드 설정 -->
	<update id="addUserKeyword" parameterType="Hashmap">
		update user
		set
		user_keyword = #{userKeyword}
		where user_code= #{userCode}
	</update>

	<!-- 첫로그인 : 자기소개 설정 -->
	<update id="addUserIntro" parameterType="Hashmap">
		update user
		set
		user_intro = #{userIntro},
		user_img = #{userImg}
		where user_code=
		#{userCode}
	</update>

	<!-- 로그인 유저체크 -->
	<select id="checkLogin" parameterType="String"
		resultType="String">
		select user_password from user where user_email = #{userEmail}
	</select>
	<!-- 로그인 유저코드 조회 -->
	<select id="getUserCode" parameterType="String"
		resultType="String">
		select user_code `userCode`
		from user
		where user_email = #{userEmail}
	</select>



	<!-- 특정 유저 정보 조회 -->
	<select id="getUser" parameterType="int" resultType="userDto">
		select
		u.user_code `userCode`, u.user_email `userEmail`, u.user_id `userId`,
		u.user_nick `userNick`, u.user_img `userImg`,
		u.user_intro `userIntro`, u.user_keyword `userKeyword`, 
		(select count(*) from post p where p.user_code = #{userCode}) `userPostCount`,
		(select distinct count(*) from follow f where f.user_code = #{userCode}) `userFollowingCount`,
		(select distinct count(*) from follow f where f.following_code = #{userCode}) `userFollowerCount`
		from user u
		where u.user_code = #{userCode}
	</select>

	<!-- 팔로잉 리스트 조회 -->
	<select id="getFollowingList" parameterType="int"
		resultType="userDto">
		select u.user_code `userCode`, u.user_id `userId`, u.user_nick `userNick`,
		u.user_img `userImg`, u.user_intro `userIntro`
		from user u
		where
		u.user_code in (select following_code from follow where user_code =
		#{userCode})
	</select>

	<!-- 팔로워 리스트 조회 -->
	<select id="getFollowerList" parameterType="int"
		resultType="userDto">
		select  u.user_code `userCode`, u.user_id `userId`, u.user_nick `userNick`,
		u.user_img `userImg`, u.user_intro `userIntro`, case when exists
		(select * from follow f where f.following_code = u.user_code and
		f.user_code = #{userCode}) then true else false end `isFollow`
		from
		user u
		where u.user_code in (select user_code from follow where
		following_code =
		#{userCode})
	</select>
	
	<!-- 팔로워 알림 조회 -->
	<select id="getFollowNoti" parameterType="int"
		resultType="userDto">
		select distinct u.user_code `userCode`, u.user_id `userId`, u.user_nick `userNick`,
		u.user_img `userImg`, u.user_intro `userIntro`, case when exists
		(select * from follow f where f.following_code = u.user_code and
		f.user_code = #{userCode}) then true else false end `isFollow`,
		f.is_read `isRead`
		from
		user u join follow f
		where u.user_code in (select user_code from follow where
		following_code = #{userCode}
		order by follow_date desc) and f.follow_date BETWEEN DATE_ADD(NOW(),INTERVAL -1 WEEK ) AND NOW();
	</select>
	

	<!-- 회원 정보 수정 -->
	<update id="editUserInfo" parameterType="userDto">
		update user
		set user_id =
		#{userId},
		user_nick = #{userNick},
		user_password = #{userPassword},
		user_intro = #{userIntro},
		user_Img = #{userImg},
		user_keyword =
		#{userKeyword}
		where user_code = #{userCode}
	</update>
	<!-- 특정 유저 ID 조회 -->
	<select id="matchUserId" parameterType="int" resultType="String">
		select
		user_id `userId`
		from user
		where user_code = #{userCode}
	</select>

	<!-- 팔로잉 추가 -->
	<insert id="followUser" parameterType="Hashmap">
		insert into follow
		(user_code, following_code)
		values (#{from}, #{to})
	</insert>

	<!-- 팔로잉 삭제 -->
	<delete id="unfollowUser" parameterType="map">
		delete from follow
		where
		user_code = #{from} and following_code=#{to}
	</delete>

	<!-- 회원 삭제 -->
	<delete id="deleteUser" parameterType="int">
		delete from user
		where
		user_code = #{userCode}
	</delete>

	<!-- 유저 검색 -->
	<select id="searchUserList" parameterType="HashMap"
		resultType="UserDto">
		select u.user_code `userCode`, u.user_id `userId`, u.user_nick `userNick`, u.user_img
		`userImg`, u.user_postcount `userPostCount`, u.user_followercount
		`userFollowerCount`, u.user_followingcount `userFollowingCount`,
		u.user_intro `userIntro`, u.user_keyword `userKeyword`,
		case when
		exists (select * from follow f where f.following_code =
		u.user_code and
		f.user_code = #{userCode}) then true else false end
		`isFollow`
		from user
		u
		where (u.user_nick like concat('%',#{search},'%')
		or u.user_id like
		concat('%',#{search},'%')) and u.user_code !=
		#{userCode}
		<if test="lastPostCode != null and lastPostCode != 0">
			and (user_code  <![CDATA[>]]>
			#{lastPostCode})
		</if>
		order by user_code
		limit #{size}
	</select>

	<!-- 팔로잉 추천 -->
	<select id="followRecommendation" parameterType="HashMap"
		resultType="UserDto">
		select user_code `userCode`,
		user_id `userId`,
		user_nick `userNick`, user_img `userImg`
		from user
		where user_code not in
		<foreach collection="followinglist" item="item" index="index"
			separator="," open="(" close=")">
			#{item}
		</foreach>
		<if test="keywordlist.size != 0">
			and(
			<foreach collection="keywordlist" item="item" index="index"
				separator="or" open="(" close=")">
				user_keyword like
				concat('%',#{item},'%')
			</foreach>
			)
		</if>
		order by rand()
		limit #{count}

	</select>

	<!-- 팔로우 리스트 목록에 포함되지 않는 유저 랜덤으로 count 개 선택 -->
	<select id="getRandomUser" parameterType="Map"
		resultType="UserDto">
		select user_code `userCode`, user_id `userId`,
		user_nick `userNick`, user_img `userImg`
		from user
		where user_code not in
		<foreach collection="followinglist" item="item" index="index"
			separator="," open="(" close=")">
			#{item}
		</foreach>
		order by rand()
		limit #{count}
	</select>
</mapper>